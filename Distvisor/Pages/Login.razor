@page "/login"
@layout EmptyLayout
@inject AuthService Auth
@inject IUriHelper  UriHelper

<div class="w-100 d-flex p-2 justify-content-center align-items-start align-items-sm-center" style="height:100vh;">
    <div class="card w-100 shadow-sm" style="max-width:30rem;">
        @if (btnDisabled != string.Empty)
        {
            <div class="progress">
                <div class="progress-bar progress-bar-indeterminate" role="progressbar"></div>
            </div>
        }
        <div class="card-header">
            <h5 class="card-title">Login to Distvisor</h5>
            <h6 class="card-subtitle">Please enter your login credentials.</h6>
        </div>
        <div class="card-body">
            <form action="about:blank" onsubmit="@LoginSubmit">
                <div class="form-group">
                    <label for="username">Username</label>
                    <input id="username" type="text" class="form-control @validClass" placeholder="Username" bind="@username" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" class="form-control @validClass" id="password" placeholder="Password" bind="@password" />
                    <div class="invalid-feedback">
                        Invalid username or password. Please try again.
                    </div>
                </div>
                <button type="submit" class="btn btn-primary w-25 float-right @btnDisabled">Login</button>
            </form>
        </div>
    </div>
</div>

@functions {

    string validClass = string.Empty;
    string btnDisabled = string.Empty;
    string username;
    string password;

    async Task LoginSubmit()
    {
        if (btnDisabled != string.Empty)
        {
            return;
        }

        validClass = string.Empty;
        btnDisabled = "disabled";

        Auth.Login(username, password);
        if (Auth.IsAuthenticated())
        {
            UriHelper.NavigateTo("/");
        }
        else
        {
            // wait 2 sec after login fail to prevent brute-force
            await Task.Delay(TimeSpan.FromSeconds(2));

            validClass = "is-invalid";
            btnDisabled = string.Empty;
        }
    }
}
